[gd_scene load_steps=6 format=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform vec4 albedo2 : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


float random(in vec3 st) {
    return fract(sin(dot(st, vec3(12.9898, 78.233, 125.355))) * 43758.5453123);
}
vec2 random2(in vec2 p) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}
vec2 point_in_cell(in vec2 cell, float time) {
    vec2 v = random2(cell);
    v = sin(v + time * (v + .5)) * 0.4 + .55;
    v += cell;
    return v;
}
float distance2(in vec2 a, in vec2 b) {
    vec2 v = a - b;
    return v.x * v.x + v.y * v.y;
}

vec4 quat_from_euler(in vec3 angle) {
    // Order of rotations: Z first, then X, then Y (mimics typical FPS camera with gimbal lock at top/bottom)
	vec3 s = sin(angle);
	vec3 c = cos(angle);
    
	return vec4(c.y * s.x * c.z + s.y * c.x * s.z
				, s.y * c.x * c.z - c.y * s.x * s.z
				, c.y * c.x * s.z - s.y * s.x * c.z
				, c.y * c.x * c.z + s.y * s.x * s.z
	);
}

vec4 quat_from_axis_angle(vec3 axis, float angle) {
    vec3 n = normalize(axis);
    float a = angle * 3.14159265358979323846264338327950288 / 360.0;
    float s = sin(angle);
    float c = cos(angle);

	return vec4(n * s, c);
}


vec3 rotate(in vec4 quat, in vec3 vec) {
	vec3 cross1 = cross(quat.xyz, vec);
	vec3 cross2 = cross(quat.xyz, cross1);
	return (cross1 * quat.w + cross2) * 2. + vec;
}
vec4 from_rotation_to(in vec3 start, in vec3 end) {
	float d = dot(start, end);
	vec3 c = cross(start, end);
	d = sqrt((1.0 + d) * 2.0);
	c *= 1.0 / d;
	return vec4(c, d * 0.5);
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	vec3 offset = albedo.xyz;
	
	vec3 right = albedo2.xyz;
	vec3 one = normalize(vec3(1.0));
	vec4 r1 = quat_from_axis_angle(one, TIME * 2.0);
	vec3 around = rotate(r1, right);
	
	vec4 r2 = quat_from_axis_angle(around, TIME * 1.0);
	offset = rotate(r2, offset * 2.0);
	
	//offset = around;
	
	VERTEX += offset;
	
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);

	
	vec3 v = fract(VERTEX * 100.001);
	
	vec3 col = mix(albedo.rgb, albedo2.rgb, step(.5, v));
	
	col = VIEW;
	
	
	ALBEDO = col; //albedo.rgb * albedo_tex.rgb;
	//METALLIC = metallic;
	//ROUGHNESS = roughness;
	//SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 1, 0, 0, 1 )
shader_param/albedo2 = Color( 0, 0.0156863, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.33
shader_param/roughness = 0.46
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="SphereMesh" id=4]

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0.470588, 0.0901961, 0.196078, 1 )
metallic = 0.26
metallic_specular = 1.0
rim_enabled = true
rim = 0.0
rim_tint = 0.68

[node name="spatial" type="Spatial"]

[node name="directional_light" type="DirectionalLight" parent="."]

[node name="mesh_instance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 17.7985 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="mesh_instance2" type="MeshInstance" parent="."]
mesh = SubResource( 4 )
material/0 = SubResource( 5 )
